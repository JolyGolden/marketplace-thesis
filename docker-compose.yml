version: '3'

services:
  # твой текущий Postgres
  master_postgres:
    image: postgres:13.3
    environment:
      - POSTGRES_USER=user_shop
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    ports:
      - '5432:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_shop -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэша
  redis:
    image: redis:6.2
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  # Твоё Spring Boot приложение (монолит)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      master_postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://master_postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: user_shop
      SPRING_DATASOURCE_PASSWORD: password
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,prometheus,metrics
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: 'true'
    ports:
      - "8080:8080"


  # Prometheus — снимает метрики с app:/actuator/prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - promdata:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    depends_on:
      - app

  # Grafana — смотри дашборды и метрики
  grafana:
    image: grafana/grafana:10.2.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafanadata:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  pgdata:
  redisdata:
  promdata:
  grafanadata:
